<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>MBrace.Library</name></assembly>
<members>
<member name="M:Nessos.MBrace.Library.ThreadPool.StartChild``1(Nessos.MBrace.Cloud{``0},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
     Provides a context-less Cloud.StartChild implementation
     for execution within the thread pool.
 </summary>
 <param name="computation">Input computation.</param>
 <param name="timeoutMilliseconds">Timeout in milliseconds.</param>
</member>
<member name="M:Nessos.MBrace.Library.ThreadPool.Parallel``1(System.Collections.Generic.IEnumerable{Nessos.MBrace.Cloud{``0}})">
 <summary>
     Provides a context-less Cloud.Parallel implementation
     for execution within the thread pool.
 </summary>
 <param name="computations">Input computations</param>
</member>
<member name="M:Nessos.MBrace.Library.ThreadPool.Choice``1(System.Collections.Generic.IEnumerable{Nessos.MBrace.Cloud{Microsoft.FSharp.Core.FSharpOption{``0}}})">
 <summary>
     Provides a context-less Cloud.Choice implementation
     for execution within the thread pool.
 </summary>
 <param name="computations">Input computations</param>
</member>
<member name="T:Nessos.MBrace.Library.ThreadPool">
<summary>
 Collection of context-less combinators for 
 execution within local thread context.
</summary>
</member>
<member name="M:Nessos.MBrace.Library.CloudFileUtils.CloudFile.WriteAllBytes.Static(System.Byte[],Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
     Write buffer contents to CloudFile.
 </summary>
 <param name="buffer">Source buffer.</param>
 <param name="path">Path to Cloud file.</param>
</member>
<member name="M:Nessos.MBrace.Library.CloudFileUtils.CloudFile.ReadAllBytes.Static(Nessos.MBrace.CloudFile)">
 <summary>
     Dump the contents of given CloudFile as byte[].
 </summary>
 <param name="file">Input CloudFile.</param>
</member>
<member name="M:Nessos.MBrace.Library.CloudFileUtils.CloudFile.WriteAllText.Static(System.String,Microsoft.FSharp.Core.FSharpOption{System.Text.Encoding},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
     Writes string contents to given CloudFile.
 </summary>
 <param name="text">Input text.</param>
 <param name="encoding">Output encoding.</param>
 <param name="path">Path to Cloud file.</param>
</member>
<member name="M:Nessos.MBrace.Library.CloudFileUtils.CloudFile.ReadAllText.Static(Nessos.MBrace.CloudFile,Microsoft.FSharp.Core.FSharpOption{System.Text.Encoding})">
 <summary>
     Dump all file contents to a single string.
 </summary>
 <param name="file">Input CloudFile.</param>
 <param name="encoding">Text encoding.</param>
</member>
<member name="M:Nessos.MBrace.Library.CloudFileUtils.CloudFile.WriteLines.Static(System.Collections.Generic.IEnumerable{System.String},Microsoft.FSharp.Core.FSharpOption{System.Text.Encoding},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
     Writes a sequence of lines to a given CloudFile path.
 </summary>
 <param name="lines">Lines to be written.</param>
 <param name="encoding">Text encoding.</param>
 <param name="path">Path to CloudFile.</param>
</member>
<member name="M:Nessos.MBrace.Library.CloudFileUtils.CloudFile.ReadLines.Static(Nessos.MBrace.CloudFile,Microsoft.FSharp.Core.FSharpOption{System.Text.Encoding})">
 <summary>
     Reads a CloudFile as a sequence of lines.
 </summary>
 <param name="file">Input CloudFile.</param>
 <param name="encoding">Text encoding.</param>
</member>
<member name="T:Nessos.MBrace.Library.CloudFileUtils">

</member>
<member name="M:Nessos.MBrace.Library.MapReduce.mapReduce``2(Microsoft.FSharp.Core.FSharpFunc{``0,Nessos.MBrace.Cloud{``1}},``1,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``1,Nessos.MBrace.Cloud{``1}}},``0[])">
 <summary>
     Map/Reduce implementation.
 </summary>
 <param name="mapper">Mapper function</param>
 <param name="id">Result identity element.</param>
 <param name="reducer">Reducer function.</param>
 <param name="inputs">Inputs.</param>
</member>
<member name="M:Nessos.MBrace.Library.MapReduce.parFold``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Nessos.MBrace.Cloud{``0}}},``0,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,Nessos.MBrace.Cloud{``0}}},``1[])">
 <summary>
     Parallel fold combinator
 </summary>
 <param name="folder">Folding workflow</param>
 <param name="id">Reduction identity element</param>
 <param name="reducer">Reducing function.</param>
 <param name="inputs">Inputs</param>
</member>
<member name="T:Nessos.MBrace.Library.MapReduce">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Nessos.MBrace.Library.SchedulerInternals">

</member>
<member name="M:Nessos.MBrace.Library.Sequential.StartChild``1(Nessos.MBrace.Cloud{``0})">
 <summary>
     Provides a context-less Cloud.StartChild implementation
     for execution within the current thread context.
 </summary>
 <param name="computation">Input computation</param>
</member>
<member name="M:Nessos.MBrace.Library.Sequential.Choice``1(System.Collections.Generic.IEnumerable{Nessos.MBrace.Cloud{Microsoft.FSharp.Core.FSharpOption{``0}}})">
 <summary>
     Provides a context-less Cloud.Choice implementation
     for execution within the current thread.
 </summary>
 <param name="computations">Input computations</param>
</member>
<member name="M:Nessos.MBrace.Library.Sequential.Parallel``1(System.Collections.Generic.IEnumerable{Nessos.MBrace.Cloud{``0}})">
 <summary>
     Provides a context-less Cloud.Parallel implementation
     for execution within the current thread.
 </summary>
 <param name="computations">Input computations</param>
</member>
<member name="M:Nessos.MBrace.Library.Sequential.fold``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Nessos.MBrace.Cloud{``0}}},``0,System.Collections.Generic.IEnumerable{``1})">
 <summary>
     Provides a context-less sequential fold implementation.
 </summary>
 <param name="folder">Folding function.</param>
 <param name="init">Initial state function.</param>
 <param name="ts">Input sequence.</param>
</member>
<member name="T:Nessos.MBrace.Library.Sequential">
<summary>
 Collection of context-less combinators for 
 execution within local thread context.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Nessos.MBrace.Library.Utils.List.split``1(Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>
     split list in half
 </summary>
 <param name="xs">input list</param>
</member>
<member name="M:Nessos.MBrace.Library.Utils.List.splitAt``1(System.Int32,Microsoft.FSharp.Collections.FSharpList{``0})">
 <summary>
     split list at given length
 </summary>
 <param name="n">splitting point.</param>
 <param name="xs">input list.</param>
</member>
<member name="T:Nessos.MBrace.Library.Utils.List">

</member>
<member name="M:Nessos.MBrace.Library.Utils.Array.splitByChunkSize``1(System.Int32,``0[])">
 <summary>
     partitions an array into chunks of given size
 </summary>
 <param name="chunkSize">chunk size.</param>
 <param name="ts">Input array.</param>
</member>
<member name="M:Nessos.MBrace.Library.Utils.Array.splitByPartitionCount``1(System.Int32,``0[])">
 <summary>
     partitions an array into a predetermined number of uniformly sized chunks.
 </summary>5 
 <param name="partitions">number of partitions.</param>
 <param name="input">Input array.</param>
</member>
<member name="T:Nessos.MBrace.Library.Utils.Array">

</member>
<member name="T:Nessos.MBrace.Library.Utils">

</member>
</members>
</doc>
