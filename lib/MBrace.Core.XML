<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>MBrace.Core</name></assembly>
<members>
<member name="P:Nessos.MBrace.Cloud.CurrentWorker">
 <summary>
     Gets information on the execution cluster.
 </summary>
</member>
<member name="P:Nessos.MBrace.Cloud.CancellationToken">
 <summary>
     Gets the current cancellation token.
 </summary>
</member>
<member name="M:Nessos.MBrace.Cloud.ToSequential``1(Nessos.MBrace.Cloud{``0})">
 <summary>
     Force sequential execution semantics for given cloud workflow.
 </summary>
 <param name="workflow">Workflow to be executed.</param>
</member>
<member name="M:Nessos.MBrace.Cloud.ToLocal``1(Nessos.MBrace.Cloud{``0})">
 <summary>
     Force thread local execution semantics for given cloud workflow.
 </summary>
 <param name="workflow">Workflow to be executed.</param>
</member>
<member name="M:Nessos.MBrace.Cloud.StartChild``1(Nessos.MBrace.Cloud{``0},Microsoft.FSharp.Core.FSharpOption{Nessos.MBrace.IWorkerRef},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
     Start cloud computation as child. Returns a cloud workflow that queries the result.
 </summary>
 <param name="computation">Computation to be executed.</param>
 <param name="target">Optional worker to execute the computation on; defaults to scheduler decision.</param>
 <param name="timeoutMilliseconds">Timeout in milliseconds; defaults to infinite.</param>
</member>
<member name="M:Nessos.MBrace.Cloud.Sleep(System.Int32)">
 <summary>
     Creates a cloud workflow that asynchronously sleeps for a given amount of time.
 </summary>
 <param name="millisecondsDue">Milliseconds to suspend computation.</param>
</member>
<member name="M:Nessos.MBrace.Cloud.Raise``1(System.Exception)">
 <summary>
     Raise an exception.
 </summary>
 <param name="e">exception to be raised.</param>
</member>
<member name="M:Nessos.MBrace.Cloud.Parallel``1(System.Collections.Generic.IEnumerable{Nessos.MBrace.Cloud{``0}})">
 <summary>
     Cloud.Parallel combinator
 </summary>
 <param name="computations">Input computations to be executed in parallel.</param>
</member>
<member name="M:Nessos.MBrace.Cloud.OfAsync``1(Microsoft.FSharp.Control.FSharpAsync{``0})">
 <summary>
     Wraps an asynchronous workflow into a cloud workflow.
 </summary>
 <param name="asyncWorkflow">Asynchronous workflow to be wrapped.</param>
</member>
<member name="M:Nessos.MBrace.Cloud.Logf(Microsoft.FSharp.Core.PrintfFormat{Nessos.MBrace.Cloud{Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.Unit,System.String,Nessos.MBrace.Cloud{Microsoft.FSharp.Core.Unit}})">
 <summary>
     Writes an entry to a logging provider, if it exists.
 </summary>
 <param name="logEntry">Added log entry.</param>
</member>
<member name="M:Nessos.MBrace.Cloud.Log(System.String)">
 <summary>
     Writes an entry to a logging provider, if it exists.
 </summary>
 <param name="logEntry">Added log entry.</param>
</member>
<member name="M:Nessos.MBrace.Cloud.Ignore``1(Nessos.MBrace.Cloud{``0})">
 <summary>
     Performs a cloud computations, discarding its result
 </summary>
 <param name="workflow"></param>
</member>
<member name="M:Nessos.MBrace.Cloud.GetWorkerCount">
 <summary>
     Gets total number of available workers in cluster context.
 </summary>
</member>
<member name="M:Nessos.MBrace.Cloud.GetTaskId">
 <summary>
     Gets the assigned id of the currently running cloud task.
 </summary>
</member>
<member name="M:Nessos.MBrace.Cloud.GetSchedulingContext">
 <summary>
     Gets the current scheduling context.
 </summary>
</member>
<member name="M:Nessos.MBrace.Cloud.GetProcessId">
 <summary>
     Gets the assigned id of the currently running cloud process.
 </summary>
</member>
<member name="M:Nessos.MBrace.Cloud.GetAvailableWorkers">
 <summary>
     Gets all workers in currently running cluster context.
 </summary>
</member>
<member name="M:Nessos.MBrace.Cloud.Dispose``1(``0)">
 <summary>
     Disposes of a distributed resource.
 </summary>
 <param name="disposable">Resource to be disposed.</param>
</member>
<member name="M:Nessos.MBrace.Cloud.Choice``1(System.Collections.Generic.IEnumerable{Nessos.MBrace.Cloud{Microsoft.FSharp.Core.FSharpOption{``0}}})">
 <summary>
     Cloud.Choice combinator
 </summary>
 <param name="computations">Input computations to be executed in parallel.</param>
</member>
<member name="M:Nessos.MBrace.Cloud.Catch``1(Nessos.MBrace.Cloud{``0})">
 <summary>
     Catch exception from given cloud workflow.
 </summary>
 <param name="cloudWorkflow">Workflow to be protected.</param>
</member>
<member name="M:Nessos.MBrace.Cloud.AwaitTask``1(System.Threading.Tasks.Task{``0})">
 <summary>
     Asynchronously await task completion
 </summary>
 <param name="task">Task to be awaited</param>
</member>
<member name="T:Nessos.MBrace.Cloud">
<summary>
 Cloud workflows static methods
</summary>
</member>
<member name="M:Nessos.MBrace.CloudArray.New``1(System.Collections.Generic.IEnumerable{``0},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
     Creates a new CloudArray in the specified container.
 </summary>
 <param name="values">Values to be stored.</param>
 <param name="uri">Target uri for given cloud array. Defaults to runtime-assigned path.</param>
</member>
<member name="M:Nessos.MBrace.CloudArray.Combine``1(System.Collections.Generic.IEnumerable{Nessos.MBrace.ICloudArray{``0}})">
 <summary>
     Combines a collection of cloud arrays into one.
 </summary>
 <param name="arrays">Cloud arrays to be combined.</param>
</member>
<member name="T:Nessos.MBrace.CloudArray">
<summary>
 Cloud array API
</summary>
</member>
<member name="T:Nessos.MBrace.CloudAttribute">
<summary>
 Adding this attribute to a let-binding marks that
 the value definition contains cloud expressions.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Nessos.MBrace.CloudBuilder">
<summary>
 Cloud workflow expression builder
</summary>
</member>
<member name="M:Nessos.MBrace.CloudFile.Read``1(Nessos.MBrace.ICloudFile,Microsoft.FSharp.Core.FSharpFunc{System.IO.Stream,Microsoft.FSharp.Control.FSharpAsync{``0}})">
 <summary> 
     Read the contents of a CloudFile using the given deserialize/reader function.
 </summary>
 <param name="cloudFile">CloudFile to read.</param>
 <param name="deserializer">Function that reads data from the underlying stream.</param>
</member>
<member name="M:Nessos.MBrace.CloudFile.New(Microsoft.FSharp.Core.FSharpFunc{System.IO.Stream,Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary> 
     Create a new file in the storage with the specified folder and name.
     Use the serialize function to write to the underlying stream.
 </summary>
 <param name="serializer">Function that will write data on the underlying stream.</param>
 <param name="uri">Target uri for given cloud file. Defaults to runtime-assigned path.</param>
</member>
<member name="M:Nessos.MBrace.CloudFile.Enumerate(System.String)">
 <summary> 
     Returns all CloudFiles in given container.
 </summary>
 <param name="container">The container (folder) to search.</param>
</member>
<member name="T:Nessos.MBrace.CloudFile">
<summary>
 Cloud file API
</summary>
</member>
<member name="M:Nessos.MBrace.CloudRef.Read``1(Nessos.MBrace.ICloudRef{``0})">
 <summary>
     Dereference a Cloud reference.
 </summary>
 <param name="cloudRef">CloudRef to be dereferenced.</param>
</member>
<member name="M:Nessos.MBrace.CloudRef.New``1(``0)">
 <summary>
     Creates a new cloud reference to the underlying store with provided value.
     Cloud references are immutable and cached locally for performance.
 </summary>
 <param name="value">Cloud reference value.</param>
</member>
<member name="T:Nessos.MBrace.CloudRef">
<summary>
 Cloud reference methods.
</summary>
</member>
<member name="M:Nessos.MBrace.CloudSeq.New``1(System.Collections.Generic.IEnumerable{``0})">
 <summary>
     Creates a new cloud sequence with given values in the underlying store.
     Cloud sequences are cached locally for performance.
 </summary>
 <param name="values">Collection to populate the cloud sequence with.</param>
</member>
<member name="T:Nessos.MBrace.CloudSeq">
<summary>
 Cloud sequence methods.
</summary>
</member>
<member name="">

</member>
<member name="T:Nessos.MBrace.Cloud`1">
<summary>
 Representation of a cloud computation, which, when run 
 will produce a value of type &apos;T, or raise an exception.
</summary>
</member>
<member name="P:Nessos.MBrace.ICloudArray`1.Size">
<summary>
 Approximate collection size in bytes.
</summary>
</member>
<member name="P:Nessos.MBrace.ICloudArray`1.Item(System.Int64)">
 <summary>
     Returns the item in the specified index.
 </summary>
 <param name="index">The item's index.</param>
</member>
<member name="P:Nessos.MBrace.ICloudArray`1.Count">
<summary>
 The number of elements contained.
</summary>
</member>
<member name="M:Nessos.MBrace.ICloudArray`1.Range(System.Int64,System.Int32)">
 <summary>
     Returns an array of the elements in the specified range.
 </summary>
 <param name="start">The starting index.</param>
 <param name="count">The number of elements to return.</param>
</member>
<member name="M:Nessos.MBrace.ICloudArray`1.Append(Nessos.MBrace.ICloudArray{`0})">
 <summary>
     Combines two CloudArrays into one.
 </summary>
 <param name="other">Other cloud array to be joined.</param>
</member>
<member name="T:Nessos.MBrace.ICloudArray`1">
<summary>
 Represents a finite and immutable sequence of
 elements that is persisted in the underlying store
 and provides fast random access.
</summary>
</member>
<member name="M:Nessos.MBrace.ICloudDisposable.Dispose">
<summary>
 Releases any storage resources used by this object.
</summary>
</member>
<member name="T:Nessos.MBrace.ICloudDisposable">
<summary>
 Denotes handle to a distributable resource that can be disposed of.
</summary>
</member>
<member name="P:Nessos.MBrace.ICloudFile.Size">
<summary>
 CloudFile size in bytes.
</summary>
</member>
<member name="M:Nessos.MBrace.ICloudFile.Read">
<summary>
 Asynchronously returns a reader stream to the file data.
</summary>
</member>
<member name="T:Nessos.MBrace.ICloudFile">
<summary>
 Represents a binary file persisted in the underlying store.
</summary>
</member>
<member name="M:Nessos.MBrace.ICloudRef`1.GetValue">
<summary>
 Asynchronously dereferences the cloud ref.
</summary>
</member>
<member name="T:Nessos.MBrace.ICloudRef`1">
<summary>
 Represents an immutable reference to an
 object that is persisted in the underlying store.
 Cloud references are cached locally for performance.
</summary>
</member>
<member name="P:Nessos.MBrace.ICloudSeq`1.Size">
<summary>
 Approximate size (in bytes) of the referenced CloudSeq.
</summary>
</member>
<member name="P:Nessos.MBrace.ICloudSeq`1.Count">
<summary>
 CloudSeq element count.
</summary>
</member>
<member name="T:Nessos.MBrace.ICloudSeq`1">
<summary>
 Represents a finite and immutable sequence of
 elements that is persisted in the underlying store
 and can be enumerated on demand.
</summary>
</member>
<member name="M:Nessos.MBrace.IMutableCloudRef`1.TryUpdate(`0)">
<summary>
 Asynchronously attempts to update the MutableCloudRef; returns true if successful.
</summary>
</member>
<member name="M:Nessos.MBrace.IMutableCloudRef`1.GetValue">
<summary>
 Asynchronously dereferences current value of MutableCloudRef.
</summary>
</member>
<member name="M:Nessos.MBrace.IMutableCloudRef`1.ForceUpdate(`0)">
<summary>
 Asynchronously forces update to MutableCloudRef regardless of state.
</summary>
</member>
<member name="T:Nessos.MBrace.IMutableCloudRef`1">
<summary>
 Represents a mutable reference to an
 object that is persisted in the underlying store.
</summary>
</member>
<member name="P:Nessos.MBrace.IStorageEntity.Uri">
<summary>
 Unique store identifier.
</summary>
</member>
<member name="P:Nessos.MBrace.IStorageEntity.Name">
<summary>
 File name
</summary>
</member>
<member name="P:Nessos.MBrace.IStorageEntity.Container">
<summary>
 Container (directory) name
</summary>
</member>
<member name="T:Nessos.MBrace.IStorageEntity">
<summary>
 Represents an entity that resides in the runtime&apos;s storage implementation
</summary>
</member>
<member name="P:Nessos.MBrace.IWorkerRef.Type">
<summary>
 Worker type identifier
</summary>
</member>
<member name="P:Nessos.MBrace.IWorkerRef.Id">
<summary>
 Worker unique identifier
</summary>
</member>
<member name="T:Nessos.MBrace.IWorkerRef">
<summary>
 Denotes a reference to a worker node in the cluster
</summary>
</member>
<member name="M:Nessos.MBrace.MutableCloudRef.TryUpdate``1(Nessos.MBrace.IMutableCloudRef{``0},``0)">
 <summary>
     Attempt to update the value of given reference with given value.
     Returns true iff the operation was successful.
 </summary>
 <param name="mref">Mutable cloud reference to be updated.</param>
 <param name="value">Value to be set.</param>
</member>
<member name="M:Nessos.MBrace.MutableCloudRef.SpinSet``1(Nessos.MBrace.IMutableCloudRef{``0},Microsoft.FSharp.Core.FSharpFunc{``0,``0},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
     Updates the MutableCloudRef using the update function.
     This method will return when the update is successful.
 </summary>
 <param name="mref">The MutableCloudRef to be updated.</param>
 <param name="update">
     A function that takes the current value of the MutableCloudRef and
     returns the new value to be stored.
 </param>
 <param name="interval">The interval, in milliseconds, to sleep between the spin calls.</param>
</member>
<member name="M:Nessos.MBrace.MutableCloudRef.Read``1(Nessos.MBrace.IMutableCloudRef{``0})">
 <summary>
     Returns the current value of the mutable cloud reference.
 </summary>
 <param name="mref">Mutable cloud ref to be dereferenced.</param>
</member>
<member name="M:Nessos.MBrace.MutableCloudRef.New``1(``0)">
 <summary>
     Creates a new mutable cloud ref with given initial value.
     Mutable cloud refs are not cached locally.
 </summary>
 <param name="init">Value to initialize mutable cloud ref with.</param>
</member>
<member name="M:Nessos.MBrace.MutableCloudRef.ForceUpdate``1(Nessos.MBrace.IMutableCloudRef{``0},``0)">
 <summary>
     Force update to the value of given reference with given value.
 </summary>
 <param name="mref">Mutable cloud reference to be updated.</param>
 <param name="value">Value to be set.</param>
</member>
<member name="T:Nessos.MBrace.MutableCloudRef">
<summary>
 Mutable cloud reference methods.
</summary>
</member>
<member name="">

</member>
<member name="T:Nessos.MBrace.NoWarnAttribute">
<summary>
 Disable static check warnings being generated for current workflow.
</summary>
</member>
<member name="T:Nessos.MBrace.SchedulingContext.Distributed">
<summary>
 Distributed scheduling context
</summary>
</member>
<member name="T:Nessos.MBrace.SchedulingContext.ThreadParallel">
<summary>
 Thread pool scheduling context
</summary>
</member>
<member name="T:Nessos.MBrace.SchedulingContext.Sequential">
<summary>
 Current thread scheduling context
</summary>
</member>
<member name="T:Nessos.MBrace.SchedulingContext">
<summary>
 Scheduling context for currently executing cloud process.
</summary>
</member>
<member name="M:Nessos.MBrace.Storage.IsValidUri(System.String)">
 <summary>
     Checks if provided uri is valid in provided underlying storage.
 </summary>
 <param name="uri">Uri to be examined.</param>
</member>
<member name="M:Nessos.MBrace.Storage.GetRandomUri(Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
     Gets a unique, randomly generated file name
     that is valid in current storage implementation.
 </summary>
 <param name="container">Container for provided storage implementation. Defaults to auto-generated container.</param>
</member>
<member name="M:Nessos.MBrace.Storage.GetRandomContainer">
 <summary>
     Gets a unique, randomly generated container (directory) name
     that is valid in current storage implementation.
 </summary>
</member>
<member name="M:Nessos.MBrace.Storage.GetFileName(System.String)">
 <summary>
     Returns the file name for the given storage uri.
 </summary>
 <param name="uri">Uri to be parsed.</param>
</member>
<member name="M:Nessos.MBrace.Storage.GetContainerName(System.String)">
 <summary>
     Returns the container name for given storage uri.
 </summary>
 <param name="uri">Uri to be parsed.</param>
</member>
<member name="M:Nessos.MBrace.Storage.Enumerate">
 <summary>
     Enumerates all containers (directories) in underlying storage.
 </summary>
</member>
<member name="T:Nessos.MBrace.Storage">
<summary>
 General purpose store methods.
</summary>
</member>
<member name="P:Nessos.MBrace.CloudBuilderModule.cloud">
<summary>
 cloud builder instance
</summary>
</member>
<member name="T:Nessos.MBrace.CloudBuilderModule">
<summary>
 Cloud builder module
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Nessos.MBrace.CloudBuilderUtils">

</member>
<member name="M:Nessos.MBrace.Operators.op_LessDotGreater``2(Nessos.MBrace.Cloud{``0},Nessos.MBrace.Cloud{``1})">
 <summary>
     Combines two cloud computations into one that executes them sequentially.
 </summary>
 <param name="left">The first cloud computation.</param>
 <param name="right">The second cloud computation.</param>
</member>
<member name="M:Nessos.MBrace.Operators.op_LessBarGreater``1(Nessos.MBrace.Cloud{``0},Nessos.MBrace.Cloud{``0})">
 <summary>
     Combines two cloud computations into one that executes them in parallel and returns the
     result of the first computation that completes and cancels the other.
 </summary>
 <param name="left">The first cloud computation.</param>
 <param name="right">The second cloud computation.</param>
</member>
<member name="M:Nessos.MBrace.Operators.op_LessBarBarGreater``2(Nessos.MBrace.Cloud{``0},Nessos.MBrace.Cloud{``1})">
 <summary>
     Combines two cloud computations into one that executes them in parallel.
 </summary>
 <param name="left">The first cloud computation.</param>
 <param name="right">The second cloud computation.</param>
</member>
<member name="T:Nessos.MBrace.Operators">
<summary>
 [omit]
 Contains common operators for cloud computation.
</summary>
</member>
<member name="M:Nessos.MBrace.Runtime.Cloud.WithMappedContinuation``2(Microsoft.FSharp.Core.FSharpFunc{Nessos.MBrace.Runtime.Continuation{``0},Nessos.MBrace.Runtime.Continuation{``1}},Nessos.MBrace.Cloud{``1})">
 <summary>
     Wraps a workflow with a mapped continuation.
 </summary>
 <param name="mapper">Continuation mapping function.</param>
 <param name="workflow">Input workflow.</param>
</member>
<member name="M:Nessos.MBrace.Runtime.Cloud.WithAppendedStackTrace``1(System.String,Nessos.MBrace.Cloud{``0})">
 <summary>
     Appends a function information entry to the symbolic stacktrace in the exception continuation.
 </summary>
 <param name="functionName">Function info string to be appended.</param>
 <param name="workflow">Workflow to be wrapped.</param>
</member>
<member name="M:Nessos.MBrace.Runtime.Cloud.TryGetResource``1">
 <summary>
     Try Getting resource from current execution context.
 </summary>
</member>
<member name="M:Nessos.MBrace.Runtime.Cloud.ToAsync``1(Nessos.MBrace.Cloud{``0},Microsoft.FSharp.Core.FSharpOption{Nessos.MBrace.Runtime.ResourceRegistry})">
 <summary>
     Wraps a cloud workflow into an asynchronous workflow.
 </summary>
 <param name="cloudWorkflow">Cloud workflow to be executed.</param>
 <param name="resources">Resource resolver to be used; defaults to empty resource registry.</param>
</member>
<member name="M:Nessos.MBrace.Runtime.Cloud.StartWithContinuations``1(Nessos.MBrace.Cloud{``0},Nessos.MBrace.Runtime.Continuation{``0},Microsoft.FSharp.Core.FSharpOption{Nessos.MBrace.Runtime.ExecutionContext})">
 <summary>
     Starts a cloud workflow with given execution context in the current thread.
 </summary>
 <param name="cloudWorkflow">Cloud workflow to be executed.</param>
 <paran name"continuation">Root continuation for workflow.</param>
 <param name="context">Local execution context.</param>
</member>
<member name="M:Nessos.MBrace.Runtime.Cloud.StartAsTask``1(Nessos.MBrace.Cloud{``0},Microsoft.FSharp.Core.FSharpOption{Nessos.MBrace.Runtime.ResourceRegistry},Microsoft.FSharp.Core.FSharpOption{System.Threading.Tasks.TaskCreationOptions},Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken})">
 <summary>
     Starts given workflow as a separate, locally executing task.
 </summary>
 <param name="cloudWorkflow">Cloud workflow to be executed.</param>
 <param name="resources">Resource registry used with workflows.</param>
 <param name="taskCreationOptions">Resource registry used with workflows.</param>
 <param name="cancellationToken">Cancellation token.</param>
</member>
<member name="M:Nessos.MBrace.Runtime.Cloud.Start(Nessos.MBrace.Cloud{Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Core.FSharpOption{Nessos.MBrace.Runtime.ResourceRegistry},Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken})">
 <summary>
     Starts provided cloud workflow in the thread pool.
 </summary>
 <param name="cloudWorkflow">Cloud workflow to be executed.</param>
 <param name="resources">Resource registry passed to execution context.</param>
 <param name="cancellationToken">Local Cancellation token.</param>
</member>
<member name="M:Nessos.MBrace.Runtime.Cloud.SetSchedulingContext``1(Nessos.MBrace.Cloud{``0},Nessos.MBrace.SchedulingContext)">
 <summary>
     Sets a new scheduling context for target workflow.
 </summary>
 <param name="workflow">Target workflow.</param>
 <param name="schedulingContext">Target scheduling context.</param>
</member>
<member name="M:Nessos.MBrace.Runtime.Cloud.RunSynchronously``1(Nessos.MBrace.Cloud{``0},Microsoft.FSharp.Core.FSharpOption{Nessos.MBrace.Runtime.ResourceRegistry},Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken})">
 <summary>
     Synchronously await a locally executing workflow.
 </summary>
 <param name="cloudWorkflow">Cloud workflow to be executed.</param>
 <param name="resources">Resource resolver to be used; defaults to no resources.</param>
 <param name="cancellationToken">Cancellation token to be used.</param>
</member>
<member name="M:Nessos.MBrace.Runtime.Cloud.GetResourceRegistry">
 <summary>
     Returns the resource registry for current execution context.
 </summary>
</member>
<member name="M:Nessos.MBrace.Runtime.Cloud.GetResource``1">
 <summary>
     Gets resource from current execution context.
 </summary>
</member>
<member name="M:Nessos.MBrace.Runtime.Cloud.FromContinuations``1(Microsoft.FSharp.Core.FSharpFunc{Nessos.MBrace.Runtime.ExecutionContext,Microsoft.FSharp.Core.FSharpFunc{Nessos.MBrace.Runtime.Continuation{``0},Microsoft.FSharp.Core.Unit}})">
 <summary>
     Creates a cloud workflow that captures the current execution context.
 </summary>
 <param name="body">Execution body.</param>
</member>
<member name="T:Nessos.MBrace.Runtime.Cloud">
<summary>
 Intrinsic cloud workflow methods
</summary>
</member>
<member name="P:Nessos.MBrace.Runtime.Continuation`1.Cancellation">
<summary>
 Cancellation continuation
</summary>
</member>
<member name="P:Nessos.MBrace.Runtime.Continuation`1.Exception">
<summary>
 Exception continuation
</summary>
</member>
<member name="P:Nessos.MBrace.Runtime.Continuation`1.Success">
<summary>
 Success continuation
</summary>
</member>
<member name="T:Nessos.MBrace.Runtime.Continuation`1">
<summary>
 Distributable continuation context.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Nessos.MBrace.Runtime.ExceptionDispatchInfo.Reify(Microsoft.FSharp.Core.FSharpOption{System.Boolean},Microsoft.FSharp.Core.FSharpOption{System.Boolean})">
 <summary>
     Returns contained exception with restored stacktrace state.
     This operation mutates exception contents, so should be used with care.
 </summary>
 <param name="useSeparator">Add a separator after remote stacktrace. Defaults to true.</param>
 <param name="prepareForRaise">Prepare exception state for raise. Defaults to false.</param>
</member>
<member name="M:Nessos.MBrace.Runtime.ExceptionDispatchInfo.Capture(System.Exception)">
 <summary>
     Captures the provided exception stacktrace into an ExceptionDispatchInfo instance.
 </summary>
 <param name="exn">Captured exception</param>
</member>
<member name="M:Nessos.MBrace.Runtime.ExceptionDispatchInfo.AppendToStackTrace(System.Collections.Generic.IEnumerable{System.String})">
 <summary>
     Creates a new ExceptionDispatchInfo instance with line appended to stacktrace.
 </summary>
 <param name="line">Line to be appended.</param>
</member>
<member name="M:Nessos.MBrace.Runtime.ExceptionDispatchInfo.AppendToStackTrace(System.String)">
 <summary>
     Creates a new ExceptionDispatchInfo instance with line appended to stacktrace.
 </summary>
 <param name="line">Line to be appended.</param>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Nessos.MBrace.Runtime.ExceptionDispatchInfo">
<summary>
 Replacement for System.Runtime.ExceptionServices.ExceptionDispatchInfo
 that is serializable and permits symbolic appending to stacktrace
</summary>
</member>
<member name="P:Nessos.MBrace.Runtime.ExecutionContext.CancellationToken">
<summary>
 Local cancellation token
</summary>
</member>
<member name="P:Nessos.MBrace.Runtime.ExecutionContext.Resources">
<summary>
 Runtime cloud resource resolver
</summary>
</member>
<member name="M:Nessos.MBrace.Runtime.ExecutionContext.Empty(Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken})">
 <summary>
     Initializes an empty execution context.  
 </summary>
 <param name="cancellationToken">Optional cancellation token.</param>
</member>
<member name="T:Nessos.MBrace.Runtime.ExecutionContext">
<summary>
 Local, non-distributable continuation execution context.
</summary>
</member>
<member name="M:Nessos.MBrace.Runtime.ICloudLogger.Log(System.String)">
 <summary>
     Log a new message to the execution context.
 </summary>
 <param name="entry">Entry to be logged.</param>
</member>
<member name="T:Nessos.MBrace.Runtime.ICloudLogger">
 <summary>
     Abstract logger.
 </summary>
</member>
<member name="P:Nessos.MBrace.Runtime.IRuntimeProvider.TaskId">
<summary>
 Get cloud task identifier
</summary>
</member>
<member name="P:Nessos.MBrace.Runtime.IRuntimeProvider.SchedulingContext">
 <summary>
     Gets the current scheduling context.
 </summary>
</member>
<member name="P:Nessos.MBrace.Runtime.IRuntimeProvider.ProcessId">
<summary>
 Get cloud process identifier
</summary>
</member>
<member name="P:Nessos.MBrace.Runtime.IRuntimeProvider.Logger">
<summary>
 Gets the current logger instance.
</summary>
</member>
<member name="P:Nessos.MBrace.Runtime.IRuntimeProvider.CurrentWorker">
<summary>
 Gets currently running worker
</summary>
</member>
<member name="M:Nessos.MBrace.Runtime.IRuntimeProvider.WithSchedulingContext(Nessos.MBrace.SchedulingContext)">
 <summary>
     Creates a new scheduler instance with updated scheduling context
 </summary>
 <param name="newContext">new scheduling context</param>
</member>
<member name="M:Nessos.MBrace.Runtime.IRuntimeProvider.ScheduleStartChild``1(Nessos.MBrace.Cloud{``0},Microsoft.FSharp.Core.FSharpOption{Nessos.MBrace.IWorkerRef},Microsoft.FSharp.Core.FSharpOption{System.Int32})">
 <summary>
     Start a new computation as a child task.
 </summary>
 <param name="workflow">Workflow to be executed.</param>
 <param name="target">Explicitly specify a target worker for execution.</param>
 <param name="timeoutMilliseconds">Timeout in milliseconds.</param>
</member>
<member name="M:Nessos.MBrace.Runtime.IRuntimeProvider.ScheduleParallel``1(System.Collections.Generic.IEnumerable{Nessos.MBrace.Cloud{``0}})">
 <summary>
     Parallel fork/join implementation.
 </summary>
 <param name="computations">Computations to be executed.</param>
</member>
<member name="M:Nessos.MBrace.Runtime.IRuntimeProvider.ScheduleChoice``1(System.Collections.Generic.IEnumerable{Nessos.MBrace.Cloud{Microsoft.FSharp.Core.FSharpOption{``0}}})">
 <summary>
     Parallel nondeterministic choice implementation.
 </summary>
 <param name="computations">Computations to be executed.</param>
</member>
<member name="M:Nessos.MBrace.Runtime.IRuntimeProvider.GetAvailableWorkers">
<summary>
 Get all available workers in cluster
</summary>
</member>
<member name="T:Nessos.MBrace.Runtime.IRuntimeProvider">
 <summary>
     Executing runtime abstraction.
 </summary>
</member>
<member name="M:Nessos.MBrace.Runtime.IStorageProvider.IsValidUri(System.String)">
 <summary>
     Checks if provided uri is valid for given storage implementation.
 </summary>
 <param name="uri">Uri to be examined.</param>
</member>
<member name="M:Nessos.MBrace.Runtime.IStorageProvider.GetRandomUri(Microsoft.FSharp.Core.FSharpOption{System.String})">
 <summary>
     Returns a unique, randomized uri (file) name 
     valid in the underlying storage implementation.
 </summary>
 <param name="container">Container for the file name. Defaults to process container.</param>
</member>
<member name="M:Nessos.MBrace.Runtime.IStorageProvider.GetRandomContainer">
 <summary>
     Returns a unique, randomized container (directory) name 
     valid in the underlying storage implementation.
 </summary>
</member>
<member name="M:Nessos.MBrace.Runtime.IStorageProvider.GetFileName(System.String)">
 <summary>
     Returns the file name for a valid uri in current storage implementation.
 </summary>
 <param name="uri">Uri to be parsed.</param>
</member>
<member name="M:Nessos.MBrace.Runtime.IStorageProvider.GetContainerName(System.String)">
 <summary>
     Returns container (directory) name for a valid uri in current storage implementation.
 </summary>
 <param name="uri">Uri to be parsed.</param>
</member>
<member name="M:Nessos.MBrace.Runtime.IStorageProvider.GetContainedFiles(System.String)">
 <summary>
     Returns all files contained in given container in the underlying storage as cloud files.
 </summary>
 <param name="container"></param>
</member>
<member name="M:Nessos.MBrace.Runtime.IStorageProvider.GetCloudFile(System.String)">
 <summary>
     Returns a cloud file found on provided uri, if it exists.
 </summary>
 <param name="uri">Uri to be looked up.</param>
</member>
<member name="M:Nessos.MBrace.Runtime.IStorageProvider.GetAllContainers">
 <summary>
     Returns all containers (directories) found in the underlying storage implementation.
 </summary>
</member>
<member name="M:Nessos.MBrace.Runtime.IStorageProvider.CreateMutableCloudRef``1(System.String,``0)">
 <summary>
     Persists a value to the underlying store and returns a typed mutable cloud reference.
 </summary>
 <param name="uri">Storage uri to be used.</param>
 <param name="value">Initial value.</param>
</member>
<member name="M:Nessos.MBrace.Runtime.IStorageProvider.CreateCloudSeq``1(System.String,System.Collections.Generic.IEnumerable{``0})">
 <summary>
     Persists a collection of values to the underlying store and return a typed cloud sequence.
 </summary>
 <param name="uri">Storage uri to be used.</param>
 <param name="values">Values to be persisted.</param>
</member>
<member name="M:Nessos.MBrace.Runtime.IStorageProvider.CreateCloudRef``1(System.String,``0)">
 <summary>
     Persists a value to the underlying store and returns a typed cloud reference.
 </summary>
 <param name="uri">Storage uri to be used.</param>
 <param name="value">Value to be persisted.</param>
</member>
<member name="M:Nessos.MBrace.Runtime.IStorageProvider.CreateCloudFile(System.String,Microsoft.FSharp.Core.FSharpFunc{System.IO.Stream,Microsoft.FSharp.Control.FSharpAsync{Microsoft.FSharp.Core.Unit}})">
 <summary>
     Serializes binary data to a file in the underlying store and returns a cloud file reference.
 </summary>
 <param name="uri">Storage uri to be used.</param>
 <param name="serializer">Asynchronous serialization function.</param>
</member>
<member name="M:Nessos.MBrace.Runtime.IStorageProvider.CreateCloudArray``1(System.String,System.Collections.Generic.IEnumerable{``0})">
 <summary>
     Stores a collection of values to the underlying store and returns a cloud array reference.
 </summary>
 <param name="uri">Storage uri to be used.</param>
 <param name="values">Values to be persisted.</param>
</member>
<member name="M:Nessos.MBrace.Runtime.IStorageProvider.CombineCloudArrays``1(System.String,System.Collections.Generic.IEnumerable{Nessos.MBrace.ICloudArray{``0}})">
 <summary>
     Combines a collection of persisted cloud arrays into one cloud array instance.
 </summary>
 <param name="uri">Entry point uri.</param>
 <param name="arrays">Arrays to be combined.</param>
</member>
<member name="T:Nessos.MBrace.Runtime.IStorageProvider">
 <summary>
     Abstract storage provider resource.
 </summary>
</member>
<member name="">

</member>
<member name="T:Nessos.MBrace.Runtime.ResourceNotFoundException">
<summary>
 Exception raised on missing resource resolution
</summary>
</member>
<member name="">

</member>
<member name="P:Nessos.MBrace.Runtime.ResourceRegistry.InstalledResources">
<summary>
 Gets all resources currently registered with factory.
</summary>
</member>
<member name="">

</member>
<member name="P:Nessos.MBrace.Runtime.ResourceRegistry.Empty">
<summary>
 Creates an empty resource container
</summary>
</member>
<member name="M:Nessos.MBrace.Runtime.ResourceRegistry.TryResolve``1">
<summary>
 Try Resolving resource of given type
</summary>
</member>
<member name="M:Nessos.MBrace.Runtime.ResourceRegistry.Resolve``1">
<summary>
 Resolves resource of given type
</summary>
</member>
<member name="M:Nessos.MBrace.Runtime.ResourceRegistry.Register``1(``0)">
 <summary>
     Creates a new resource registry by appending provided resource.
     Any existing resources of the same type will be overwritten.
 </summary>
 <param name="resource">input resource.</param>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Nessos.MBrace.Runtime.ResourceRegistry">
<summary>
 Immutable dependency container used for pushing
 runtime resources to the continuation monad.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="M:Nessos.MBrace.Runtime.Trampoline.Reset">
<summary>
 Resets the trampoline state in the current thread.
</summary>
</member>
<member name="M:Nessos.MBrace.Runtime.Trampoline.Reset">
<summary>
 Resets the trampoline state in the current thread.
</summary>
</member>
<member name="M:Nessos.MBrace.Runtime.Trampoline.QueueWorkItem(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,Microsoft.FSharp.Core.Unit})">
<summary>
 Queue a new work item to the .NET thread pool.
</summary>
</member>
<member name="M:Nessos.MBrace.Runtime.Trampoline.IsBindThresholdReached">
<summary>
 Checks if continuation execution stack has reached specified threshold in the current thread.
</summary>
</member>
<member name="M:Nessos.MBrace.Runtime.Trampoline.IsBindThresholdReached">
<summary>
 Checks if continuation execution stack has reached specified threshold in the current thread.
</summary>
</member>
<member name="">

</member>
<member name="">

</member>
<member name="T:Nessos.MBrace.Runtime.Trampoline">
<summary>
 Mechanism for offloading execution stack in the thread pool
</summary>
</member>
<member name="M:Nessos.MBrace.Runtime.Continuation.choice``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpChoice{``1,System.Exception}},Nessos.MBrace.Runtime.Continuation{``1})">
 <summary>
     Contravariant Continuation choice combinator.
 </summary>
 <param name="f">Choice function.</param>
 <param name="tcont">Initial continuation.</param>
</member>
<member name="M:Nessos.MBrace.Runtime.Continuation.failwith``2(Microsoft.FSharp.Core.FSharpFunc{``0,System.Exception},Nessos.MBrace.Runtime.Continuation{``1})">
 <summary>
     Contravariant failure combinator
 </summary>
 <param name="f">Mapper function.</param>
 <param name="tcont">Initial continuation.</param>
</member>
<member name="M:Nessos.MBrace.Runtime.Continuation.map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Nessos.MBrace.Runtime.Continuation{``1})">
 <summary>
     Contravariant Continuation map combinator.
 </summary>
 <param name="f">Mapper function.</param>
 <param name="tcont">Initial continuation.</param>
</member>
<member name="T:Nessos.MBrace.Runtime.Continuation">
<summary>
 Continuation utility functions
</summary>
</member>
<member name="M:Nessos.MBrace.Runtime.ExceptionDispatchInfoModule.raiseWithCurrentStackTrace``2(System.Boolean,``0)">
 <summary>
     Immediately raises exception instance, preserving its current stacktrace
 </summary>
 <param name="useSeparator">Appends a stacktrace separator after the remote stacktrace.</param>
 <param name="exn">Input exception.</param>
</member>
<member name="M:Nessos.MBrace.Runtime.ExceptionDispatchInfoModule.raise``1(System.Boolean,Nessos.MBrace.Runtime.ExceptionDispatchInfo)">
 <summary>
     Raise provided exception dispatch info.
 </summary>
 <param name="useSeparator">Appends a stacktrace separator after the remote stacktrace.</param>
 <param name="edi">Exception dispatch info to be raised.</param>
</member>
<member name="T:Nessos.MBrace.Runtime.ExceptionDispatchInfoModule">

</member>
<member name="M:Nessos.MBrace.Runtime.ExceptionDispatchInfoUtils.Async.RunSync``1(Microsoft.FSharp.Control.FSharpAsync{``0},Microsoft.FSharp.Core.FSharpOption{System.Threading.CancellationToken})">
 <summary>
     Runs the asynchronous computation and awaits its result.
     Preserves original stacktrace for any exception raised.
 </summary>
 <param name="workflow">Workflow to be run.</param>
 <param name="cancellationToken">Optioncal cancellation token.</param>
</member>
<member name="M:Nessos.MBrace.Runtime.ExceptionDispatchInfoUtils.Async.Raise``1(System.Exception)">
 <summary>
     Efficiently reraise exception, without losing its existing stacktrace.
 </summary>
 <param name="e"></param>
</member>
<member name="">

</member>
<member name="T:Nessos.MBrace.Runtime.ExceptionDispatchInfoUtils">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="">

</member>
<member name="P:Nessos.MBrace.Runtime.ResourceBuilder.resource">
<summary>
 resource registry builder
</summary>
</member>
<member name="T:Nessos.MBrace.Runtime.ResourceBuilder">
<summary>
 Resource registry builder API
</summary>
</member>
<member name="">

</member>
<member name="T:Nessos.MBrace.Runtime.ResourceRegistryUtils">

</member>
<member name="M:Nessos.MBrace.StoreExtensionMethods.IMutableCloudRef`1.get_Value``1(Nessos.MBrace.IMutableCloudRef{``0})">
<summary>
 Synchronously retrieves the current value of the mutable cloud ref
</summary>
</member>
<member name="M:Nessos.MBrace.StoreExtensionMethods.ICloudRef`1.get_Value``1(Nessos.MBrace.ICloudRef{``0})">
<summary>
 Synchronously dereferences the cloud ref
</summary>
</member>
<member name="T:Nessos.MBrace.StoreExtensionMethods">

</member>
</members>
</doc>
